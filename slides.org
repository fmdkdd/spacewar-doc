#+ -*- mode: org; ispell-local-dictionary: "francais"; -*-
#+Title: Élaboration d'un jeu multijoueur en HTML5
#+Author: Florent Marchand de Kerchove
#+Email: fmdkdd@gmail.com
#+Date: 27 juin 2011
#+Language: fr

## Supplementary info.
#+Beamer_Header_Extra: \institute{Université du Havre}

## Beamer slideshow.
#+LATEX_CMD: xelatex
#+LaTeX_CLASS: beamer
#+Beamer_frame_level: 3

## Structure
#+Latex_Header: \setbeamertemplate{navigation symbols}{}
#+Latex_Header: \setbeamertemplate{title page}[plain]
#+Latex_Header: \setbeamertemplate{footline}[frame number]

## Styling
#+Latex_Header: \setsansfont[Mapping=tex-text]{Optima LT Std}

#+Latex_Header: \definecolor{Backdrop}{RGB}{62, 62, 62}
#+Latex_Header: \definecolor{Tangerine}{RGB}{223, 135, 47}
#+Latex_Header: \definecolor{Tinkerbell}{RGB}{220, 220, 204}
#+Latex_Header: \definecolor{Liloo}{RGB}{161, 219, 219}
#+Latex_Header: \definecolor{Waterose}{RGB}{204, 147, 147}

#+Latex_Header: \usecolortheme[named=Backdrop]{structure}
#+Latex_Header: \setbeamercolor{normal text}{fg=Tinkerbell, bg=Backdrop}
#+Latex_Header: \setbeamercolor{frametitle}{fg=Tangerine, bg=Backdrop}
#+Latex_Header: \setbeamerfont{title}{series=\bfseries}
#+Latex_Header: \setbeamercolor{title}{fg=Tangerine, bg=Backdrop}
#+Latex_Header: \setbeamercolor{item}{fg=Tangerine}
#+Latex_Header: \setbeamercolor{section in toc}{fg=Tangerine}
#+Latex_Header: \setbeamerfont{footline}{size=\small}

#+Latex_Header: \setbeamertemplate{items}[circle]
#+Latex_Header: \setbeamertemplate{itemize subitem}{--}
#+Latex_Header: \setbeamertemplate{sections/subsections in toc}[circle]

#+Latex_Header: \setbeamertemplate{blocks}[rounded][shadow=true]
#+Latex_Header: \setbeamercolor{block title}{fg=Liloo, bg=Backdrop!110}
#+Latex_Header: \setbeamercolor{block body}{fg=Tinkerbell, bg=Backdrop!95}

## Do not number title page and outline frame.
#+Bind: org-export-latex-title-command "\\thispagestyle{empty}\\maketitle"
#+Bind: org-beamer-outline-frame-options "\\\\thispagestyle{empty}"

## French outline title.
#+Bind: org-beamer-outline-frame-title "Table des matières"

## Code listings
#+Latex_Header: \usepackage{listings}

#+Latex_Header: \lstset{basicstyle=\sffamily}
#+Latex_Header: \lstset{tabsize=3, columns=fullflexible, keepspaces=true}
#+Latex_Header: \lstset{breaklines=false, showstringspaces=false, xleftmargin=5pt}
#+Latex_Header: \lstset{aboveskip=0, belowskip=0}

#+Latex_Header: \lstnewenvironment{javascript}
#+Latex_Header: {\lstset{ language={C}, morekeywords={var, function}, stringstyle=\color{Waterose} }}{}

#+Latex_Header: \lstnewenvironment{coffeescript}
#+Latex_Header: {\lstset{ language={Ruby}, morekeywords={of}, stringstyle=\color{Waterose} }}{}
#+Bind: org-export-latex-custom-lang-environments ((espresso "javascript") (coffee "coffeescript"))

## Make fragile frame when using javascript environment.
#+Bind: org-beamer-fragile-re "^[ \t]*\\\\begin{\\(coffeescript\\|javascript\\)}"

## Graphics
#+Latex_Header: \usepackage{tikz}
#+Latex_Header: \usetikzlibrary{arrows}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Begin document

## Org beamer inserts title frame and outline automatically, reset
## frame counter.
#+Beamer: \setcounter{framenumber}{0}

## Print outline when changing section.
#+BEGIN_lateX
\AtBeginSection[] {
  \begin{frame}<beamer>{}
    \tableofcontents[currentsection]
  \end{frame}
}
#+END_lateX

## Introduction frame.
#+BEGIN_lateX
  \begin{frame}{Intro}
  \begin{center}
    \includegraphics[width=10.5cm]{img/glorious-action-shot.png}
  \end{center}
  \end{frame}
#+END_latex

* Technologies fondatrices
** JavaScript
*** JavaScript \\ Historique
	 - Langage de programmation des navigateurs web
	 - Créé en 1995 par Brendan Eich chez Netscape
	 - Standardisé sous le nom d'ECMAScript en 1996
	 - Initialement limité, regain d'intérêt avec AJAX
	 - Nombreux frameworks puissants (jQuery, CommonJS, Dojo)
	 - Présent sur la majorité des sites d'aujourd'hui

*** JavaScript \\ Caractéristiques
	 - Descend de Scheme et Self
	 - Langage fonctionnel (fonctions de première classe, /closures)
	 - Langage dynamique (faiblement typé, évalué à l'exécution)
	 - Héritage par prototype
	 - Syntaxe empruntée à Java

	 Avantages :
	 - Langage de haut niveau
	 - Multi-plateforme (requiert un navigateur)
	 - Fonctionnalités asynchrones
	 - Programmation évènementielle

	 CoffeeScript : langage intermédiaire plus épuré

** Canvas HTML
*** Canvas HTML \\ Description
	 Élément <canvas> :
	 - Permet de dessiner et d'animer librement sur une page web
	 - Contextes 2d et 3d (WebGL)
	 - API stable
	 - Implémenté dans les navigateurs majeurs

	 Alternative aux SVG plus performante :
	 - Surface /bitmapped/ plutôt que vectorielle
	 - Pas d'insertion dans le DOM
	 - Accélération matérielle possible

*** Canvas HTML \\ Exemple
    #+Begin_latex
	 \begin{columns}
	 \begin{column}{0.5\textwidth}
    \begin{block}{}
	 \lstset{basicstyle=\sffamily\scriptsize, aboveskip=0, belowskip=0}
	 \begin{javascript}
function init() {
	var canvas =
      document.querySelector('#canvas');
	var ctxt = canvas.getContext('2d');
	ctxt.fillStyle = 'hsl(40, 30%, 90%)';
	ctxt.fillRect(0,0,300,300);
	
	for (var i=0; i < 10; ++i) {
		ctxt.save();
		ctxt.translate(Math.random()*250,
                          Math.random()*250);
		ctxt.fillStyle = 'hsla(' +
          Math.random()*360 +
          ', 50%, 50%, 0.8)';
      ctxt.beginPath();
		ctxt.arc(24, 24, 12 + 12*Math.sin(i),
          Math.PI*2, false);
		ctxt.fill();
		ctxt.restore();
	}
}
	 \end{javascript}
    \end{block}
	 \end{column}

    \begin{column}{0.5\textwidth}
    \begin{center}
    \includegraphics[width=\textwidth]{img/canvas-ex1.png}
    \end{center}
    \end{column}
    \end{columns}
    #+End_latex

** WebSocket
*** Protocole WebSocket \\ Description
	 - Réponse du standard aux techniques Comet
	 - Rend obsolète HTTP /long-polling/ et HTTP /streaming/
	 - Véritable /full-duplex/ entre client et serveur HTTP
	 - Mise à jour de la connexion TCP créée pour la requête HTTP
	 - Protocole en évolution

** Node.js
*** Node.js \\ Description
	 - Serveur performant écrit en JavaScript
	 - Fournit une API réseau élémentaire
	 - Utilise le moteur JavaScript V8 de Google
	 - Entrées/sorties asynchrones (/epoll/, /kqueue/, ...)
	 - Programmation événementielle
	 - Nombreux modules dont Socket.IO pour les WebSocket

*** Node.js \\ Exemples
	 #+begin_latex
	 \begin{overprint}

	 \onslide<1>
	 \begin{block}{Serveur écho}
	 \begin{javascript}
var net = require('net');

var server = net.createServer(function (socket) {
	socket.write("Echo server");
	socket.pipe(socket);
});
	 \end{javascript}
	 \end{block}

	 \onslide<2>
	 \begin{block}{Serveur http}
	 \begin{javascript}
var http = require('http');

http.createServer(function (req, res) {
	res.writeHead(200, {'Content-Type': 'text/plain'});
	res.end('Hello World');
}).listen(1337, "127.0.0.1");
	 \end{javascript}
	 \end{block}

	 \end{overprint}
	 #+end_latex

* Derrière Spacewar
** Principe de jeu
*** Principe de jeu \\ Démonstration
	 #+ Expliquer d'abord grossièrement, puis live demo.
	 Principe de Spacewar :
	 - Jeu d'action frénétique dans l'espace
	 - À chaque joueur un vaisseau
	 - But : tirer sur les autres et survivre

	 #+Latex: \vfill

	 #+begin_latex
	 \begin{center}
	 \tikz \node [draw=none, fill=Liloo!50!black, inner sep=1.5mm, rounded corners=2.5mm]
	   {\href{http://localhost:12345/}{$\blacktriangleright$ Démonstration}};
	 \end{center}
	 #+end_latex

*** Principe de jeu \\ Éléments du jeu
	 - Contrôles simples :
		- Tourner à gauche, à droite
		- Avancer
		- Tirer
		- Utiliser un bonus
	 - Carte torique
	 - Obstacles : planètes et satellites
	 - Trajectoire des balles affectées par la gravité des planètes
	 - Les bonus apportent de la variété (mines, turbo, bouclier, ...)

** Côté client
*** Client \\ Rôle du client
	 - Relayer les entrées claviers au serveur
	 - Recevoir les messages du serveur
	 - Afficher le jeu en temps réel
		
	Semblable à un terminal : toute la logique est côté serveur.

*** Client \\ Boucle de dessin
	 #+begin_latex
	 \begin{columns}
	 \begin{column}{0.5\textwidth}
	 \vskip-90pt
	 \begin{itemize}
	 \item Un jeu d'action exige un rendu fluide (40 à 60 FPS)
	 \item Requiert de dessiner très rapidement une frame
	 \item Utilise uniquement le canvas HTML
	 \end{itemize}
	 \end{column}

	 \begin{column}{0.54\textwidth}
	 \begin{block}{}
	 \lstset{basicstyle=\sffamily\small}
	 \begin{coffeescript}
redraw = (context) ->
	context.clearCanvas()

	centerView()

	for obj in gameObjects
		obj.draw(context) if obj.inView()

	for e in effects
		e.draw(context) if e.inView()

	drawInfinity(context)

	drawUI(context)
	 \end{coffeescript}
	 \end{block}
	 \end{column}
	 \end{columns}
	 #+end_latex

*** Client \\ Dessiner le tore
	 Donner l'illusion d'une carte torique :
	 - Remplir le canvas de copies de la carte
	 - Considérer les entités les plus proches sur le tore
	 - Appliquer la logique de jeu au tore côté serveur

    #+BEGIN_latex
    \vfill
	 \begin{overprint}
	 \onslide<1>
      \begin{center}
        \centering
        \begin{tikzpicture}[scale=0.8]
          \begin{scope}
            \fill [Waterose, opacity=.8]
              (0,1.2) rectangle +(.75,1.3);
      
            \draw [Waterose, thick]
              (0,0) rectangle +(2.5,2.5)
              node [anchor=south east] {Carte};
      
            \draw [Liloo, thick]
              (-.75,1.2) rectangle +(1.5,1.5)
              node [anchor=south east] {Canvas};
          \end{scope}
      
          \draw [thick, ->, >=stealth']
            (3.5,2.5) to (5.5,2.5)
            node [above, midway] {drawInfinity};
      
          \begin{scope}[xshift=9cm]
            \fill [Waterose, opacity=0.8]
              (0,1.2) rectangle +(.75,1.3);
            \fill [Waterose, opacity=0.5]
              (-.75,1.2) rectangle +(.75,1.3);
            \fill [Waterose, opacity=0.5]
              (-.75,2.5) rectangle +(1.5,.2);
      
            \draw [Waterose, thick]
              (0,0) rectangle +(2.5,2.5);
      
            \draw [Waterose, opacity=.7, thick]
              (-2.5,0) rectangle +(2.5,2.5)
              (-2.5,2.5) rectangle +(2.5,2.5)
              (0,2.5) rectangle +(2.5,2.5);
      
            \draw [Liloo, thick]
              (-.75,1.2) rectangle +(1.5,1.5);
          \end{scope}
        \end{tikzpicture}
      \end{center}

	 \onslide<2>
      \begin{center}
        \begin{tikzpicture}[scale=1.3]
          \draw [Waterose, thick]
            (0,0) rectangle +(2.5,2.5)
            node [anchor=south east] {Carte};
          \draw [Waterose, opacity=0.7, thick]
            (-2.5,0) rectangle +(2.5,2.5);
      
          \fill [Tinkerbell] (2.3,2.2) circle (3pt)
            node [anchor=east, xshift=-1mm, yshift=.3mm] {Ennemi};
          \fill [Tinkerbell, opacity=0.7] (-0.2,2.2) circle (3pt)
            node [anchor=east, xshift=-1mm, yshift=.5mm] {Fantôme};
      
          \draw [Liloo, thick]
            (-.5,.2) rectangle +(1.5,1.5)
            node [at start, anchor=south east, yshift=-1.5mm] {Canvas};
      
          \fill [Liloo]
            (.25,.95) circle (3pt);
        \end{tikzpicture}
      \end{center}
	 \end{overprint}
    #+END_latex		

*** Client \\ Performance
	 Comment optimiser le dessin sur le client ?
	 - Ne pas dessiner les objets hors champ
	 - Sauvegarder les dessins coûteux dans des /sprites/
	 - Optimisations de bas niveau hors de notre contrôle
	 - Accélération matérielle fournie par les navigateurs

** Côté serveur
*** Serveur \\ Rôle du serveur
	 - Gérer la logique du jeu :
		- Initialiser la carte de jeu
		- Mouvoir les objets (vaisseaux, planètes, balles, ...)
		- Détecter les collisions entre objets
		- Résoudre ces collisions
	 - Synchroniser l'information auprès des clients

*** Serveur \\ Communications clients-serveur
	 Connexion d'un client :
	 - Attribution d'un identifiant
	 - Création d'un objet /Player/ associé
	 - Envoi de tous les objets de jeu

	 Durant la partie :
	 - Les clients envoient leurs entrées clavier
	 - Le serveur broadcast les changements

	 Déconnexion d'un client :
	 - Notification aux autres clients
	 - Libération des ressources associées

*** Serveur \\ Initialiser la carte de jeu
	 - Chargement du fichier de préférences :
		- Dimensions de la carte
		- Nombre de planètes à placer
		- Taille des planètes, des satellites
		- Vitesse et distance des satellites
	 - Placement aléatoire sans chevauchements

	 #+Begin_latex
    \vfill
      \begin{center}
        \begin{tikzpicture}
          \draw [Liloo, opacity=1, thick] (0,0) circle (1cm);
          \draw [Liloo, opacity=1, thick] (1.1, 1.1) circle (.3cm);
          \draw [Waterose, opacity=1, thick] (0,0) circle (1.87cm);
        \end{tikzpicture}
      \end{center}
      
	 #+End_latex

*** Serveur \\ Boucle principale
	 Étapes effectuées toutes les 20ms :
	 - Agir en fonction des évènements clavier
	 - Déplacer tous les objets
	 - Détecter et résoudre les collisions
	 - Récolter les changements d'état de chaque objet
	 - Broadcaster les changements de tous les objets

*** Serveur \\ Gérer les collisions
	 Traitement symétrique centralisé :
	 #+Begin_latex
	 \begin{block}{}
	 \begin{coffeescript}
'ship-mine': (ship, mine) ->
	ship.explode()
	mine.nextState() if mine.state is 'active'\end{coffeescript}
	 \end{block}
	 #+End_latex

	 Algorithme performant crucial :
	 - Approche naïve quadratique
	 - Vérification des collisions entre voisins
	 - Découpage de la carte en grille

*** Améliorations envisagées
	 - Instanciation des parties :
		- Rejoindre une partie aléatoire ou entre amis
		- Création de parties personnalisées
	 - Communication entre joueurs
	 - Optimisations serveur :
		- Diminuer le coût des collisions
		- Permettre un plus grand nombre de joueur simultanés

*** Améliorations envisagées (2)
	 - Optimisations client :
		- Dessiner plus rapidement
		- Améliorer la compatibilité avec tous les navigateurs
	 - Éléments de jeu supplémentaires :
		- Bonus (bouclier, missile)
		- Contenu solo
		- Mesure de progrès (score, statistiques)

    #+Latex: \vfill
    
    Autant de prétextes pour apprendre

*** Merci
	 #+Begin_beamer
	 \begin{center}
	 \huge Questions / Réponses
	 \end{center}
	 #+End_beamer
